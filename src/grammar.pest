num = @{ int ~ ("." ~ ASCII_DIGIT*)? ~ (^"e" ~ int)? }
    int = { ("+" | "-")? ~ ASCII_DIGIT+ }

boolean = @{ "true" | "false" }
ident = @{ ALPHABETIC ~ (ALPHABETIC | ASCII_DIGIT )* }

string = ${ "\"" ~
    (string_part | ("\\" ~ escape_c))*
~ "\"" }
    string_part = @{ ( !("\"" | "\\" | NEWLINE) ~ ANY )+ }
    escape_c = @{ ("x" ~ ('0' .. '7') ~ HEX_DIGIT ) | ANY }

operation = _{
    concat | add | subtract | multiply | divide |
    eq | neq | lt | lte | gt | gte
}
    add      = { "+" }
    concat   = { "++" }
    subtract = { "-" }
    multiply = { "*" }
    divide   = { "/" }
    eq       = { "==" }
    neq      = { "!=" }
    lt       = { "<" }
    lte      = { "<=" }
    gt       = { ">" }
    gte      = { ">=" }

unop = _{ neg | not | ref | deref }
    not   = { "!" }
    ref   = { "&" }
    neg   = { "-" }
    deref = { "*" }

if = {
    "if" ~ expr ~ ":" ~ expr ~ "else" ~ expr
}

idents = { (ident ~ ("," ~ ident)*)? ~ ","? }
exprs = { (expr ~ ("," ~ expr)*)? ~ ","? }

lambda = {
    "fn" ~ "(" ~ idents ~ ")" ~ expr
}
call = {
    ident ~ "(" ~ exprs ~ ")"
}

literal = { num | boolean | string }
expr = { term ~ (operation ~ term)*}
term = _{ if | lambda | literal | call | ident | unop ~ expr | "(" ~ expr ~ ")" }

binding = _{
    let_decl | fn_decl | var_decl | rebind
}
    let_decl = { "let" ~ ident ~ "=" ~ expr }
    fn_decl = { "fn" ~ ident ~ "(" ~ idents ~ ")" ~ block }
    var_decl = { "var" ~ ident ~ "=" ~ expr }
    rebind = { ident ~ "=" ~ expr }

statement = { (binding | expr)? }
    stmnts = { (statement ~ (";" ~ statement)*)? }

block = _{ "{" ~ stmnts ~ "}" }

program = _{ SOI ~
    stmnts
~ EOI }

WHITESPACE = _{ " " | "\t" | NEWLINE }
COMMENT = _{ "//" ~ (!NEWLINE ~ ANY)* ~ (NEWLINE | &EOI) }
