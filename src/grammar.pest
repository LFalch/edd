// TODO: clean this up

num = @{ int ~ ("." ~ ASCII_DIGIT*)? ~ (^"e" ~ int)? }
int = { ("+" | "-")? ~ ASCII_DIGIT+ }

boolean = @{ "true" | "false" }
ident = @{ ALPHABETIC ~ (ALPHABETIC | ASCII_DIGIT | "_" )* }

string = ${ "\"" ~
    (string_part | ("\\" ~ escape_c))*
~ "\"" }
    string_part = @{ ( !("\"" | "\\" | NEWLINE) ~ ANY )+ }
    escape_c = @{ ("x" ~ ('0' .. '7') ~ HEX_DIGIT ) | ANY }

type = {
    primitive |
    opt | ptr | slice | array | arrptr | fntype |
    grouped
}
    primitive = {
        bool_t | byte_t | u8_t | i8_t | u16_t |
        i16_t | u32_t | i32_t | float_t | unit_t
    }
        bool_t = { "bool" }
        byte_t = { "byte" }
        u8_t = { "u8" }
        i8_t = { "i8" }
        u16_t = { "u16" }
        i16_t = { "i16" }
        u32_t = { "u32" }
        i32_t = { "i32" }
        float_t = { "float" }
        unit_t = { "unit" }
    opt = { "?" ~ type }
    ptr = { "*" ~ type }
    slice = { "[]" ~ type }
    array = { "[" ~ int ~ "]" ~ type }
    arrptr = { "[" ~ "*" ~ "]" ~ type }
    fntype = { "fn" ~ "(" ~ types ~ ")" ~ type }
    grouped = _{ "(" ~ type ~ ")" }

types = { (type ~ ("," ~ type)*)? ~ ","? }

type_annot_opt = { (":" ~ type)? }
type_annot = { ":" ~ type }
return_type = { type? }
typed_ident = { ident ~ type_annot }
mtyped_ident = { ident ~ type_annot_opt }

operation = _{
    concat | add | subtract | multiply | divide |
    eq | neq | lte | gte | gt | lt | cast_as
}
    add      = { "+" }
    concat   = { "++" }
    subtract = { "-" }
    multiply = { "*" }
    divide   = { "/" }
    eq       = { "==" }
    neq      = { "!=" }
    lt       = { "<" }
    lte      = { "<=" }
    gt       = { ">" }
    gte      = { ">=" }
    cast_as  = { "as" }

unop = _{ neg | not | ref | deref }
    not   = { "!" }
    ref   = { "&" }
    neg   = { "-" }
    deref = { "*" }

if = {
    "if" ~ expr ~ ":" ~ expr ~ "else" ~ expr
}

typed_idents = { (typed_ident ~ ("," ~ typed_ident)*)? ~ ","? }
mtyped_idents = { (mtyped_ident ~ ("," ~ mtyped_ident)*)? ~ ","? }
exprs = { (expr ~ ("," ~ expr)*)? ~ ","? }

lambda = {
    "fn" ~ "(" ~ mtyped_idents ~ ")" ~ return_type ~ expr
}
call = {
    ident ~ "(" ~ exprs ~ ")"
}

literal = { num | boolean | string }
expr = { term ~ (operation ~ term)*}
term = _{ if | lambda | literal | call | ident | unop ~ expr | "(" ~ expr ~ ")" | block }

let_bind = { "let" ~ ident ~ type_annot_opt ~ "=" ~ expr }
var_bind = { "var" ~ ident ~ type_annot_opt ~ "=" ~ expr }
assign = { pl_expr ~ "=" ~ expr }
    pl_expr = { ident |
        deref_expr | array_index | field_access |
        "(" ~ pl_expr ~ ")"
    }
        deref_expr = { "*" ~ expr }
        array_index = { expr ~ "[" ~ expr ~ "]" }
        field_access = { expr ~ "." ~ ident }
return = { "ret" ~ expr }

statement = { (let_bind | var_bind | assign | return | expr)? }
statements = _{ (statement ~ (";" ~ statement)*)? }

block = { "{" ~ statements ~ "}" }

static_decl = {
    "static" ~ typed_ident ~ "=" ~ expr ~ ";"
}
const_decl = {
    "const" ~ typed_ident ~ "=" ~ expr ~ ";"
}
fn_decl = {
    "fn" ~ ident ~ "(" ~ typed_idents ~ ")" ~ return_type
    ~ block
}
extern_decl = {
    "extern" ~ typed_ident ~ ";"
}
extern_fn_decl = {
    "extern" ~ "fn" ~ ident ~ "(" ~ typed_idents ~ ")" ~ return_type
    ~ ";"
}
include = {
    "include" ~ "(" ~ string ~ ")" ~ ";"
}
program = _{ SOI ~
    (
        static_decl | const_decl | fn_decl
        | extern_fn_decl | extern_decl
        | include
    )*
~ EOI }

WHITESPACE = _{ " " | "\t" | NEWLINE }
COMMENT = _{ "//" ~ (!NEWLINE ~ ANY)* ~ (NEWLINE | &EOI) }
